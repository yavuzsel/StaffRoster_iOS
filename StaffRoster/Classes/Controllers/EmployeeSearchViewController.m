//  ViewController.m
//
//  Generated by the the JBoss AeroGear Xcode Project Template on 5/23/13.
//  See Project's web site for more details http://www.aerogear.org
//

#import "EmployeeSearchViewController.h"
#import "StaffRosterAPIClient.h"
#import "StaffDetailTableViewController.h"

@implementation EmployeeSearchViewController {
    UISearchBar *_searchBar;
    bool _load_mutex;
}

@synthesize employees = _employees;
@synthesize load_with_no_search_bar = _load_with_no_search_bar;
@synthesize pageType = _pageType;
@synthesize titleName = _titleName;

- (void)viewDidLoad {
    [super viewDidLoad];
    self.navigationItem.rightBarButtonItem = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemSearch target:self action:@selector(popToRoot:)];
    
    if (!_pageType) {
        // default to search page
        _pageType = kEmployeeSearchViewPageTypeSearch;
    }
    
    // set title according to page type and corresponding employee name (_titleName)
    NSString *titleText;
    switch (_pageType) {
        case kEmployeeSearchViewPageTypeSearch:
            // no visible title bar
            break;
            
        case kEmployeeSearchViewPageTypeColleagues:
            titleText = [[NSString alloc] initWithFormat:@"%@'s Colleagues", ([_titleName length]<7)?_titleName:[[_titleName componentsSeparatedByString:@" "] objectAtIndex:0]];
            break;
            
        case kEmployeeSearchViewPageTypeDReports:
            titleText = [[NSString alloc] initWithFormat:@"%@'s Direct Reports", ([_titleName length]<7)?_titleName:[[_titleName componentsSeparatedByString:@" "] objectAtIndex:0]];
            break;
            
        default:
            break;
    }
    self.navigationItem.title = titleText;
    
    _load_mutex = true;
    if (_load_with_no_search_bar) {
        return;
    }
    _searchBar = [[UISearchBar alloc] initWithFrame:CGRectMake(0.0, 0.0, 320, self.tableView.rowHeight)];
    _searchBar.delegate = self;
    _searchBar.placeholder = @"search employees";
	self.tableView.tableHeaderView = _searchBar;
}

- (void)viewWillAppear:(BOOL)animated {
    if (_load_with_no_search_bar) {
        [self.navigationController setNavigationBarHidden:NO animated:YES];
    } else {
        [self.navigationController setNavigationBarHidden:YES animated:YES];
    }
}

- (IBAction)popToRoot:(id)sender {
    [self.navigationController popToRootViewControllerAnimated:YES];
}

#pragma mark - UISearchBar delegate methods

- (void)searchBarTextDidBeginEditing:(UISearchBar *)searchBar {
    searchBar.showsCancelButton = YES;
}

- (void)searchBar:(UISearchBar *)searchBar textDidChange:(NSString *)searchText {
    if ([searchText length] < 3) {
        _employees = nil;
        [self.tableView reloadData];
        return;
    }
    if (!_load_mutex) {
        return;
    }
    _load_mutex = false;
    // fetch the data
    [[StaffRosterAPIClient sharedInstance].employeesPipe readWithParams:[[NSMutableDictionary alloc] initWithDictionary:@{@"query": searchText}] success:^(id responseObject) {
        _employees = responseObject;
        NSLog(@"Response obj: %@", responseObject);
        // update table with the newly fetched data
        [self.tableView reloadData];
        
    } failure:^(NSError *error) {
        NSLog(@"An error has occured during read! \n%@", error);
    }];
    _load_mutex = true;
}

- (void)searchBarCancelButtonClicked:(UISearchBar *)searchBar {
    [searchBar resignFirstResponder];
    searchBar.showsCancelButton = NO;
}

- (void)viewDidUnload {
    [super viewDidUnload];
    // Release any retained subviews of the main view.
}

- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation {
    return (interfaceOrientation != UIInterfaceOrientationPortraitUpsideDown);
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    return ([_employees count])?([_employees count]):1;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {

    static NSString *CellIdentifier = @"Cell";
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];
    
    if (cell == nil) {
        cell = [[UITableViewCell alloc]initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier];
    }
    
    NSUInteger row = [indexPath row];
    
    if (![_employees count]) {
        switch (_pageType) {
            case kEmployeeSearchViewPageTypeSearch:
                cell.textLabel.text = @"Search for Employees";
                break;
                
            case kEmployeeSearchViewPageTypeColleagues:
                cell.textLabel.text = @"No Colleagues";
                break;
                
            case kEmployeeSearchViewPageTypeDReports:
                cell.textLabel.text = @"No Direct Reports";
                break;
                
            default:
                cell.textLabel.text = nil;
                break;
        }
        
        cell.selectionStyle = UITableViewCellSelectionStyleNone;
        cell.accessoryType = UITableViewCellAccessoryNone;
        return cell;
    }
    
    cell.selectionStyle = UITableViewCellSelectionStyleBlue;
    
    cell.accessoryType = UITableViewCellAccessoryDisclosureIndicator;
    
    cell.textLabel.text = [[_employees objectAtIndex:row] objectForKey:@"cn"];
    
    return cell;
}

- (NSString *)tableView:(UITableView *)tableView titleForFooterInSection:(NSInteger)section {
    if (_pageType == kEmployeeSearchViewPageTypeDReports) {
        if ([_employees count]) {
            NSMutableDictionary *locationDict = [[NSMutableDictionary alloc] init];
            NSMutableDictionary *titleDict = [[NSMutableDictionary alloc] init];
            for (int i=0; i<[_employees count]; i++) {
                if ([locationDict objectForKey:[[_employees objectAtIndex:i] objectForKey:@"rhatlocation"]]) {
                    [locationDict setObject:[NSNumber numberWithInteger:[[locationDict objectForKey:[[_employees objectAtIndex:i] objectForKey:@"rhatlocation"]] integerValue]+1] forKey:[[_employees objectAtIndex:i] objectForKey:@"rhatlocation"]];
                } else {
                    [locationDict setObject:[NSNumber numberWithInteger:1] forKey:[[_employees objectAtIndex:i] objectForKey:@"rhatlocation"]];
                }
                if ([[_employees objectAtIndex:i] objectForKey:@"title"] != [NSNull null]) {
                    if ([titleDict objectForKey:[[_employees objectAtIndex:i] objectForKey:@"title"]]) {
                        [titleDict setObject:[NSNumber numberWithInteger:[[titleDict objectForKey:[[_employees objectAtIndex:i] objectForKey:@"title"]] integerValue]+1] forKey:[[_employees objectAtIndex:i] objectForKey:@"title"]];
                    } else {
                        [titleDict setObject:[NSNumber numberWithInteger:1] forKey:[[_employees objectAtIndex:i] objectForKey:@"title"]];
                    }
                }
            }
            NSMutableString *statsStr = [[NSMutableString alloc] initWithString:@"\nDirect Reports From:\n\n"];
            for (id key in locationDict) {
                [statsStr appendFormat:@"%@ => %@\n\n", [locationDict objectForKey:key], key];
            }
            [statsStr appendString:@"\n\nDirect Reports Titles:\n\n"];
            for (id key in titleDict) {
                [statsStr appendFormat:@"%@ => %@\n\n", [titleDict objectForKey:key], key];
            }
            return statsStr;
        }
    }
    return nil;
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {
    if (![_employees count]) {
        return;
    }
    [tableView deselectRowAtIndexPath:indexPath animated:YES];
    
    StaffDetailTableViewController *detailViewController = [[StaffDetailTableViewController alloc] initWithStyle:UITableViewStyleGrouped];
    detailViewController.person = [_employees objectAtIndex:indexPath.row];
    
    [self.navigationController pushViewController:detailViewController animated:YES];
}

@end